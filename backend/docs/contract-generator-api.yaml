openapi: 3.0.0
info:
  title: Smart Contract Generator API
  description: |
    API for generating and refining smart contracts using OpenZeppelin and Uniswap V3 on Rootstock.
    This API allows users to generate smart contracts from natural language descriptions
    and refine existing contracts with specific instructions.

    ## Supported Frameworks
    ### OpenZeppelin 4.9.3
    - **Available Components**:
      - Access Control: Ownable, AccessControl
      - Tokens: ERC20, ERC721, ERC777, ERC1155
      - Security: ReentrancyGuard, Pausable
      - Utilities: SafeMath (for Solidity <0.8.0)
      - Governance: Governor, TimelockController
      - Proxy/Upgrades: Transparent, UUPS
    - **Solidity Version**: 0.8.0 to 0.8.9

    ### Uniswap V3 on Rootstock
    - **Versions**:
      - Uniswap V3 Core: 1.0.0
      - Uniswap V3 Periphery: 1.0.0
      - Solidity: 0.8.29
    - **Rootstock Addresses**:
      - v3 Core Factory: 0xaF37EC98A00FD63689CF3060BF3B6784E00caD82
      - Universal Router: 0x244f68e77357f86a8522323eBF80b5FC2F814d3E
      - Proxy Admin: 0xE6c223e32eD33f29b4D7C002C01DebDA629e4604
      - Nonfungible Position Manager: 0x9d9386c042F194B460Ec424A1e57ACDE25f5C4b1
      - Quoter V2: 0xb51727c996C68E30F598A923A5006853Cd2fEB31
      - SwapRouter02: 0x0B14ff67f0014046b4b99057Aec4509640b3947A
    - **Main Components**: IUniswapV3Pool, ISwapRouter, INonfungiblePositionManager, IQuoter

    ## Generator Operation
    The generator uses natural language models to create smart contracts from descriptions.
    The process includes:
    1. Analyzing the request to determine which frameworks to use
    2. Generating Solidity code
    3. Compiling and verifying the contract
    4. Automatic error correction (up to 3 attempts)
    5. Returning the compiled contract with its ABI and bytecode

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Contracts
    description: Operations related to smart contract generation and refinement

paths:
  /generate:
    post:
      tags:
        - Contracts
      summary: Generate a new smart contract
      description: |
        Generates a smart contract based on a natural language description.
        The system can generate contracts using OpenZeppelin, Uniswap V3, or a combination of both,
        depending on what is specifically requested in the prompt.

        ### Tips for better results:
        - Be specific about the type of contract you want (ERC20, ERC721, etc.)
        - Clearly mention required functionalities
        - Specify names, symbols, and decimals for tokens
        - For Uniswap contracts, indicate which operations you need (swap, liquidity, etc.)
        - For combined contracts, clearly describe how both frameworks should interact
      operationId: generateContract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
            examples:
              openZeppelinOnly:
                summary: OpenZeppelin-only contract
                value:
                  prompt: "Create a simple ERC20 token named \"MyToken\" with symbol \"MTK\" and 18 decimals. It should have a mint function that can only be called by the owner."
              openZeppelinAdvanced:
                summary: Advanced OpenZeppelin contract
                value:
                  prompt: "Create an ERC20 token named \"GovernanceToken\" with symbol \"GOV\" that allows voting on governance proposals. Include functions for vote delegation, balance snapshots, and token locking during voting periods."
              uniswapOnly:
                summary: Uniswap-only contract
                value:
                  prompt: "Create a contract that allows swapping tokens on Uniswap V3 on Rootstock. It should have a function to swap exact tokens for maximum output of another token."
              uniswapLiquidity:
                summary: Uniswap liquidity contract
                value:
                  prompt: "Create a contract that allows users to provide liquidity in Uniswap V3 pools on Rootstock. Include functions to add liquidity in specific price ranges and withdraw positions."
      responses:
        '200':
          description: Contract generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateSuccessResponse'
        '400':
          description: Request error or contract compilation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /generate/documentation:
    post:
      tags:
        - Contracts
      summary: Generate documentation for a smart contract
      description: |
        Generates detailed documentation for an existing smart contract.
        The documentation includes descriptions of all functions and their parameters,
        making it easier to understand the contract's functionality.

        ### Tips for better results:
        - Provide complete source code with all imports
        - Include the contract's ABI for accurate function analysis
        - Make sure the contract compiles successfully
      operationId: generateDocumentation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateDocumentationRequest'
            examples:
              erc20Token:
                summary: Document an ERC20 token
                value:
                  source: "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MyToken is ERC20, Ownable {\n    constructor() ERC20(\"MyToken\", \"MTK\") {}\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}"
                  abi: [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}]
      responses:
        '200':
          description: Documentation generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  functionDescriptions:
                    type: object
                    description: Detailed descriptions of each function in the contract
                    additionalProperties:
                      type: string
                example:
                  functionDescriptions:
                    mint: "Allows the contract owner to create new tokens and assign them to a specified address. Parameters: 'to' - recipient address, 'amount' - number of tokens to mint."
                    transfer: "Transfers tokens from the sender's address to another address. Parameters: 'to' - recipient address, 'amount' - number of tokens to transfer."
        '400':
          description: Invalid request or source code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /generate/diagram:
    post:
      tags:
        - Contracts
      summary: Generate a diagram for a smart contract
      description: |
        Generates a visual representation of a smart contract's structure and interactions.
        The diagram includes contract components, functions, and their relationships,
        making it easier to understand the contract's architecture.

        ### Tips for better results:
        - Provide complete source code with all imports
        - Include the contract's ABI for accurate function analysis
        - Optionally include function descriptions for better context
        - Make sure the contract compiles successfully
      operationId: generateDiagram
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateDiagramRequest'
            examples:
              erc20Token:
                summary: Generate diagram for an ERC20 token
                value:
                  source: "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MyToken is ERC20, Ownable {\n    constructor() ERC20(\"MyToken\", \"MTK\") {}\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}"
                  abi: [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}]
                  functionDescriptions:
                    mint: "Allows the contract owner to create new tokens"
      responses:
        '200':
          description: Diagram generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  diagramData:
                    type: object
                    properties:
                      nodes:
                        type: array
                        items:
                          type: object
                      edges:
                        type: array
                        items:
                          type: object
                      explanation:
                        type: string
                example:
                  diagramData:
                    nodes:
                      - id: "contract"
                        type: "contract"
                        data:
                          label: "MyToken"
                        position:
                          x: 100
                          y: 100
                      - id: "mint"
                        type: "function"
                        data:
                          label: "mint"
                        position:
                          x: 200
                          y: 200
                    edges:
                      - id: "contract-mint"
                        source: "contract"
                        target: "mint"
                        label: "owns"
                    explanation: "MyToken is an ERC20 contract with minting capability controlled by an owner"
        '400':
          description: Invalid request or source code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refine:
    post:
      tags:
        - Contracts
      summary: Refine an existing smart contract
      description: |
        Refines an existing smart contract based on specific instructions.
        The system can modify contracts that use OpenZeppelin, Uniswap V3, or a combination of both,
        depending on what is specifically requested in the prompt.

        ### Tips for better results:
        - Provide the complete source code of the contract
        - Be specific about required changes
        - Mention if certain functionalities should remain unchanged
        - For complex modifications, break down instructions into clear steps
        - Indicate if there are compatibility restrictions to consider
      operationId: refineContract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefineRequest'
            examples:
              addFunction:
                summary: Add a function to an existing contract
                value:
                  source: "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MyToken is ERC20, Ownable {\n    constructor() ERC20(\"MyToken\", \"MTK\") {}\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}"
                  prompt: "Add a burn function that allows users to burn their own tokens."
              addUniswapFunctionality:
                summary: Add Uniswap functionality to an existing contract
                value:
                  source: "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MyToken is ERC20, Ownable {\n    constructor() ERC20(\"MyToken\", \"MTK\") {}\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}"
                  prompt: "Add functionality to allow users to swap their tokens on Uniswap V3 on Rootstock. Users should be able to swap their tokens for other tokens."
              fixSecurityIssue:
                summary: Fix security issues in a contract
                value:
                  source: "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\ncontract TokenSwapper {\n    ISwapRouter public immutable swapRouter;\n    \n    constructor(address _swapRouter) {\n        swapRouter = ISwapRouter(_swapRouter);\n    }\n    \n    function swapExactInputSingle(address tokenIn, address tokenOut, uint256 amountIn) external returns (uint256 amountOut) {\n        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\n        \n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            fee: 3000,\n            recipient: msg.sender,\n            deadline: block.timestamp,\n            amountIn: amountIn,\n            amountOutMinimum: 0,\n            sqrtPriceLimitX96: 0\n        });\n        \n        amountOut = swapRouter.exactInputSingle(params);\n    }\n}"
                  prompt: "Fix the security issues in this contract: 1) Use SafeERC20 for transfers, 2) Add an amountOutMinimum parameter to prevent front-running, 3) Add a configurable deadline, 4) Verify that tokens are not address(0)."
      responses:
        '200':
          description: Contract refined successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateSuccessResponse'
        '400':
          description: Request error or contract compilation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    GenerateRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          description: |
            Natural language description of the contract to generate.

            The prompt should be as specific as possible, including:
            - Contract type (ERC20, ERC721, swap, etc.)
            - Token name and symbol
            - Required functionalities
            - Access restrictions (if applicable)
            - Interactions with other contracts (if applicable)
          example: "Create a simple ERC20 token named \"MyToken\" with symbol \"MTK\" and 18 decimals."

    GenerateDocumentationRequest:
      type: object
      required:
        - source
        - abi
      properties:
        source:
          type: string
          description: |
            Complete source code of the contract.

            Must include:
            - All imports
            - SPDX License
            - Solidity version
            - Complete contract definition
        abi:
          type: array
          description: Contract ABI (Application Binary Interface)
          items:
            type: object

    GenerateDiagramRequest:
      type: object
      required:
        - source
        - abi
      properties:
        source:
          type: string
          description: |
            Complete source code of the contract.

            Must include:
            - All imports
            - SPDX License
            - Solidity version
            - Complete contract definition
        abi:
          type: array
          description: Contract ABI (Application Binary Interface)
          items:
            type: object
        functionDescriptions:
          type: object
          description: Optional descriptions of contract functions
          additionalProperties:
            type: string

    GenerateSuccessResponse:
      type: object
      required:
        - source
      properties:
        source:
          type: string
          description: |
            Complete source code of the generated contract.

            Includes:
            - All necessary imports
            - SPDX License
            - Solidity version
            - Complete contract implementation
        abi:
          type: array
          description: |
            Contract ABI (Application Binary Interface).

            JSON representation of the contract's functions, events, and errors,
            allowing external applications to interact with the contract on the blockchain.
          items:
            type: object
        bytecode:
          type: string
          description: |
            Compiled contract bytecode.

            This is the binary code that gets deployed to the blockchain.
            Can be used directly for deployment using tools like web3.js, ethers.js, or Hardhat.
        warnings:
          type: array
          description: |
            Warnings generated during compilation.

            These warnings don't prevent the contract from working but may indicate
            potential issues or best practices that aren't being followed.
          items:
            type: object
        attempts:
          type: integer
          description: |
            Number of attempts made to generate the contract.

            The system tries up to 3 times to automatically correct compilation errors.

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: |
            Main error message.

            Indicates the general type of error that occurred.
          example: "Error generating contract"
        details:
          type: string
          description: |
            Additional error details.

            Provides more specific information about what went wrong.
          example: "Compilation error on line 15: Undeclared variable"
        source:
          type: string
          description: |
            Contract source code with errors.

            This is the last generated code before compilation failed.
        errors:
          type: array
          description: |
            Detailed list of compilation errors.

            Each error includes information about its severity, message, and location in the code.
          items:
            type: object
            properties:
              severity:
                type: string
                enum: [error, warning]
                description: |
                  Error severity level.
                  - error: Prevents contract compilation
                  - warning: Doesn't prevent compilation but indicates potential issues
              message:
                type: string
                description: Simple error message
              formattedMessage:
                type: string
                description: |
                  Formatted error message with additional information like
                  line number, column, and code context.
        warnings:
          type: array
          description: |
            List of compilation warnings.

            These warnings don't prevent compilation but indicate potential issues.
          items:
            type: object
        attempts:
          type: integer
          description: |
            Number of attempts made before failing.

            The system tries up to 3 times to automatically correct compilation errors.

    RefineRequest:
      type: object
      required:
        - source
        - prompt
      properties:
        source:
          type: string
          description: |
            Complete source code of the existing contract.

            Must include:
            - All imports
            - SPDX License
            - Solidity version
            - Complete contract definition
          example: "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MyToken is ERC20 {\n    constructor() ERC20(\"MyToken\", \"MTK\") {}\n}"
        prompt:
          type: string
          description: |
            Detailed instructions for modifying the contract.

            Instructions should:
            - Clearly specify what changes are required
            - Mention any new functionality to add
            - Indicate if existing code needs to be modified
            - Specify any restrictions or special considerations
          example: "Add a mint function that can only be called by the owner."

x-tagGroups:
  - name: Endpoints
    tags:
      - Contracts

x-components:
  messages:
    ErrorCompilacion:
      description: |
        ## Errores comunes de compilación y cómo solucionarlos

        ### 1. Versión de Solidity incorrecta
        - **Error**: "Source file requires different compiler version"
        - **Solución**: Asegúrese de usar versiones de Solidity compatibles (0.8.0-0.8.9 para OpenZeppelin, 0.8.29 para Uniswap V3)

        ### 2. Importaciones incorrectas
        - **Error**: "File not found" o "Import file not found"
        - **Solución**: Verifique las rutas de importación y asegúrese de usar las versiones correctas de las bibliotecas

        ### 3. Funciones no implementadas
        - **Error**: "Function has to be implemented"
        - **Solución**: Implemente todas las funciones requeridas por las interfaces que está utilizando

        ### 4. Problemas de compatibilidad
        - **Error**: "Derived contract must override function"
        - **Solución**: Asegúrese de que las versiones de las bibliotecas sean compatibles entre sí

    LimitacionesAPI:
      description: |
        ## Limitaciones y consideraciones

        ### Tamaño del contrato
        - Los contratos muy grandes pueden no compilarse correctamente debido a limitaciones de gas
        - Considere dividir la funcionalidad en múltiples contratos si es necesario

        ### Complejidad
        - Los contratos muy complejos pueden requerir múltiples refinamientos
        - Para funcionalidades avanzadas, considere generar un contrato base y luego refinarlo

        ### Versiones de bibliotecas
        - Esta API soporta OpenZeppelin 4.9.3 y Uniswap V3 1.0.0
        - Otras versiones pueden no ser compatibles

        ### Seguridad
        - Siempre audite los contratos generados antes de desplegarlos en producción
        - La API genera código funcional pero no garantiza que sea seguro para todos los casos de uso